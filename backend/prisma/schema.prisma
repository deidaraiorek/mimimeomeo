datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  name      String?
  password  String   // Password for authentication
  resetPasswordToken  String?  // Optional field for storing reset tokens        
  coupleId  Int?     // Removed @unique constraint to allow multiple users per couple
  couple    Couple?  @relation(fields: [coupleId], references: [id]) 
  createdAt DateTime @default(now())

  @@index([email])
  @@index([coupleId])
}


model Couple {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  users     User[]   // A couple has two users
  notes     Note[]   // Cascade delete specified on the Note model
  events    Event[]  // Cascade delete specified on the Event model
  albums    Album[]  // Cascade delete specified on the Album model
}

model Invitation {
  id            Int      @id @default(autoincrement())         
  senderEmail   String   @unique  
  receiverEmail String   @unique              
  createdAt     DateTime @default(now()) 
                                                
  @@index([senderEmail])
  @@index([receiverEmail])
}


model Note {
  id        Int      @id @default(autoincrement())
  title     String?  // Title of the note (optional)
  content   Json     // Delta (JSON) content of the note
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coupleId  Int      // Link notes to the couple
  couple    Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@index([coupleId])
}

model Event {
  id          Int      @id @default(autoincrement())
  name        String   // Name of the event (required)
  date        DateTime // Date of the event
  location    String?  // Location of the event (optional)
  description String?  // Description of the event (optional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  coupleId    Int      // Link event to the couple
  couple      Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@index([coupleId])
}

model Album {
  id        Int      @id @default(autoincrement())
  name      String
  lastImage String?
  images    String[]
  createdAt DateTime @default(now())
  coupleId  Int
  couple    Couple   @relation(fields: [coupleId], references: [id], onDelete: Cascade)

  @@unique([name, coupleId])
  @@index([coupleId])
}






